<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zxy.test.dao.EmployeeMapper">
<!-- namespace的名称空间
    id 标签的唯一标示
-->
    <select id="getEmployeeById" resultType="employee" >
      select * from tbl_employee where id = #{id}
    </select>

    <!--
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
    <insert id="addEmp" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>

    <!--获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性-->
    <!--    public int addEmp(Employee employee);-->
    <insert id="addEmp" parameterType="employee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, gender, email)
        values(#{lastName},#{gender},#{email})
    </insert>
    <!--  public int updateEmp(Employee employee);-->
    <update id="updateEmp" parameterType="employee">
        update  tbl_employee
        set last_name=#{lastName},gender=#{gender},email=#{email}
        where id=#{id}
    </update>
    <!--  public int deleteEmpById(Integer id);   -->
    <delete id="deleteEmpById" parameterType="Integer">
        delete from tbl_employee where id=#{id}
    </delete>

<!--传递多个参数-->
    <select id="getEmployeeByIdAndLastName" resultType="employee">
      select * from tbl_employee where id = #{id} and last_name=#{lastName}
    </select>
<!--传递一个map-->
    <select id="getEmployeeByMap" resultType="employee" >
      select * from tbl_employee where id = #{id} and last_name=#{lastName}
    </select>

    <!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
    <!--resultType：如果返回的是一个集合，要写集合中元素的类型  -->
    <select id="getEmpsByLastNameLike" resultType="list">
		select * from tbl_employee where last_name like #{lastName}
	</select>

   <!-- <select id="getEmpsByLastNameLike" resultType="list">
		select * from tbl_employee where last_name like #{lastName}
	</select>-->

    <select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id like #{id}
	</select>

    <select id="getEmpByLastNameLikeReturnMap" resultType="map">
		select * from tbl_employee where last_name like #{lastName}
	</select>
</mapper>