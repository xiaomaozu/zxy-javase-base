<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zxy.test.dao.EmployeeMapperPlus">

    <!--自定义某个javaBean的封装规则,这个时候驼峰命名是否开启，没多大意义
	type：自定义规则的Java类型
	id:唯一id方便引用
	  -->
    <resultMap id="MySinpleEmp" type="employee">
        <!-- 指定主键列的封装规则
            column 指定哪一列
            property  指定对应的javaBean属性
        -->
        <id column="id" property="id"></id>
        <!--定义普通列封装规则-->
        <result column="last_name" property="lastName"></result>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="last_name" property="lastName"></result>
    </resultMap>
    <!--
            联合查询：级联属性封装结果集
     -->
    <resultMap type="employee" id="MyDifEmp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="department.id"/>
        <result column="dept_name" property="department.departmentName"/>
    </resultMap>
    <!--
         使用association定义关联的单个对象的封装规则；
      -->
    <resultMap id="MyDifEmp2" type="employee">
        <!--  association可以指定联合的javaBean对象
    property="dept"：指定哪个属性是联合的对象
    javaType:指定这个属性对象的类型[不能省略]
    -->
        <id column="id" property="id"></id>
        <!--定义普通列封装规则-->
        <result column="last_name" property="lastName"></result>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="last_name" property="lastName"></result>
        <association property="department" javaType="com.zxy.test.pojo.Department">
            <id column="did" property="id"></id>
            <result column="dept_name" property="departmentName"></result>
        </association>
    </resultMap>

    <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
    <resultMap type="employee" id="MyEmpByStep">
    <id column="id" property="id"/>
    <result column="last_name" property="lastName"/>
    <result column="email" property="email"/>
    <result column="gender" property="gender"/>
    <!-- association定义关联对象的封装规则
        select:表明当前属性（property的值）是调用select指定的方法查出的结果,
        column:指定将哪一列的值传给这个方法

        流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
     -->
    <association property="department" select="com.zxy.test.dao.DepartmentMapper.getDeptById" column="d_id">
    </association>
    </resultMap>

    <!-- 可以使用延迟加载（懒加载）；(按需加载) lazyLoadingEnabled
        Employee==>Dept：
            我们每次查询Employee对象的时候，都将一起查询出来。
            部门信息在我们使用的时候再去查询；（节省数据库）
            分段查询的基础之上加上两个配置：
     -->
    <!-- ==================association============================ -->


    
    <!--
     场景一：
         查询Employee的同时查询员工对应的部门
         Employee===Department
         一个员工有与之对应的部门信息；
         id  last_name  gender    d_id     did  dept_name (private Department dept;)
      -->
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
      SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		d.id did,d.dept_name dept_name FROM tbl_employee e,tbl_dept d
		WHERE e.d_id=d.id AND e.id=#{id}
    </select>

    <!--
	场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
	 -->
    <!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
    <select id="getEmpsByDeptId" resultType="employee">
		select * from tbl_employee where d_id=#{deptId}
	</select>

    <select id="getEmpById" resultMap="MySinpleEmp" >
      select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmpByIdStep" resultMap="MyEmpByStep" >
      select * from tbl_employee where id = #{id}
    </select>
</mapper>